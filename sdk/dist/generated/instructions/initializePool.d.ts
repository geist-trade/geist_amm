/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */
import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';
import { InitializePoolArgs } from '../types/InitializePoolArgs';
/**
 * @category Instructions
 * @category InitializePool
 * @category generated
 */
export type InitializePoolInstructionArgs = {
    args: InitializePoolArgs;
};
/**
 * @category Instructions
 * @category InitializePool
 * @category generated
 */
export declare const initializePoolStruct: beet.FixableBeetArgsStruct<InitializePoolInstructionArgs & {
    instructionDiscriminator: number[];
}>;
/**
 * Accounts required by the _initializePool_ instruction
 *
 * @property [_writable_, **signer**] admin
 * @property [_writable_] core
 * @property [_writable_] pool
 * @property [_writable_] lpToken
 * @property [_writable_] lpTokenAdminAta
 * @category Instructions
 * @category InitializePool
 * @category generated
 */
export type InitializePoolInstructionAccounts = {
    admin: web3.PublicKey;
    core: web3.PublicKey;
    pool: web3.PublicKey;
    lpToken: web3.PublicKey;
    lpTokenAdminAta: web3.PublicKey;
    rent?: web3.PublicKey;
    tokenProgram?: web3.PublicKey;
    systemProgram?: web3.PublicKey;
    anchorRemainingAccounts?: web3.AccountMeta[];
};
export declare const initializePoolInstructionDiscriminator: number[];
/**
 * Creates a _InitializePool_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category InitializePool
 * @category generated
 */
export declare function createInitializePoolInstruction(accounts: InitializePoolInstructionAccounts, args: InitializePoolInstructionArgs, programId?: web3.PublicKey): web3.TransactionInstruction;
