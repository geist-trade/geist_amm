/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */
type ErrorWithCode = Error & {
    code: number;
};
type MaybeErrorWithCode = ErrorWithCode | null | undefined;
/**
 * InvalidCallbackError: 'InvalidCallbackError'
 *
 * @category Errors
 * @category generated
 */
export declare class InvalidCallbackErrorError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * StablecoinNotSupported: 'StablecoinNotSupported'
 *
 * @category Errors
 * @category generated
 */
export declare class StablecoinNotSupportedError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * StablecoinAlreadySupported: 'StablecoinAlreadySupported'
 *
 * @category Errors
 * @category generated
 */
export declare class StablecoinAlreadySupportedError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * Frozen: 'Frozen'
 *
 * @category Errors
 * @category generated
 */
export declare class FrozenError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * InvalidOracle: 'InvalidOracle'
 *
 * @category Errors
 * @category generated
 */
export declare class InvalidOracleError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * DuplicatedMints: 'DuplicatedMints'
 *
 * @category Errors
 * @category generated
 */
export declare class DuplicatedMintsError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * NotEnoughTokens: 'NotEnoughTokens'
 *
 * @category Errors
 * @category generated
 */
export declare class NotEnoughTokensError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * CastFailed: 'CastFailed'
 *
 * @category Errors
 * @category generated
 */
export declare class CastFailedError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * MathOverflow: 'MathOverflow'
 *
 * @category Errors
 * @category generated
 */
export declare class MathOverflowError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * InvariantPrecisionNotFound: 'InvariantPrecisionNotFound'
 *
 * @category Errors
 * @category generated
 */
export declare class InvariantPrecisionNotFoundError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * DivisionByZero: 'DivisionByZero'
 *
 * @category Errors
 * @category generated
 */
export declare class DivisionByZeroError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * PoolTokensCountOutOfBound: 'PoolTokensCountOutOfBound'
 *
 * @category Errors
 * @category generated
 */
export declare class PoolTokensCountOutOfBoundError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * InvalidInputLength: 'InvalidInputLength'
 *
 * @category Errors
 * @category generated
 */
export declare class InvalidInputLengthError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * AmplificationCoefficientOutOfBound: 'AmplificationCoefficientOutOfBound'
 *
 * @category Errors
 * @category generated
 */
export declare class AmplificationCoefficientOutOfBoundError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * LpTokenPreMinted: 'LpTokenPreMinted'
 *
 * @category Errors
 * @category generated
 */
export declare class LpTokenPreMintedError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * InvalidMintAuthority: 'InvalidMintAuthority'
 *
 * @category Errors
 * @category generated
 */
export declare class InvalidMintAuthorityError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * InvalidFreezeAuthority: 'InvalidFreezeAuthority'
 *
 * @category Errors
 * @category generated
 */
export declare class InvalidFreezeAuthorityError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * LpTokenNotInitialized: 'LpTokenNotInitialized'
 *
 * @category Errors
 * @category generated
 */
export declare class LpTokenNotInitializedError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * InvalidRemainingAccountsSchema: 'InvalidRemainingAccountsSchema'
 *
 * @category Errors
 * @category generated
 */
export declare class InvalidRemainingAccountsSchemaError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * InvalidTokenAccountOwner: 'InvalidTokenAccountOwner'
 *
 * @category Errors
 * @category generated
 */
export declare class InvalidTokenAccountOwnerError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * InvalidTokenAccountMint: 'InvalidTokenAccountMint'
 *
 * @category Errors
 * @category generated
 */
export declare class InvalidTokenAccountMintError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * InvalidVault: 'InvalidVault'
 *
 * @category Errors
 * @category generated
 */
export declare class InvalidVaultError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * InvalidTokenAccount: 'InvalidTokenAccount'
 *
 * @category Errors
 * @category generated
 */
export declare class InvalidTokenAccountError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * AtaNotInitialized: 'AtaNotInitialized'
 *
 * @category Errors
 * @category generated
 */
export declare class AtaNotInitializedError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * NotEnoughFunds: 'NotEnoughFunds'
 *
 * @category Errors
 * @category generated
 */
export declare class NotEnoughFundsError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * InvalidInput: 'InvalidInput'
 *
 * @category Errors
 * @category generated
 */
export declare class InvalidInputError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * PoolIdMismatch: 'PoolIdMismatch'
 *
 * @category Errors
 * @category generated
 */
export declare class PoolIdMismatchError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * PoolFrozen: 'PoolFrozen'
 *
 * @category Errors
 * @category generated
 */
export declare class PoolFrozenError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * NotEnoughLiquidity: 'NotEnoughLiquidity'
 *
 * @category Errors
 * @category generated
 */
export declare class NotEnoughLiquidityError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * ProtocolFrozen: 'ProtocolFrozen'
 *
 * @category Errors
 * @category generated
 */
export declare class ProtocolFrozenError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * SlippageExceeded: 'SlippageExceeded'
 *
 * @category Errors
 * @category generated
 */
export declare class SlippageExceededError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * SuperadminMismatch: 'InvalidSuperadmin'
 *
 * @category Errors
 * @category generated
 */
export declare class SuperadminMismatchError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * StablecoinWithdrawOnly: 'StablecoinWithdrawOnly'
 *
 * @category Errors
 * @category generated
 */
export declare class StablecoinWithdrawOnlyError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * InsufficientBalanceForWithdrawal: 'InsufficientBalanceForWithdrawal'
 *
 * @category Errors
 * @category generated
 */
export declare class InsufficientBalanceForWithdrawalError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * ZeroBalance: 'ZeroBalance'
 *
 * @category Errors
 * @category generated
 */
export declare class ZeroBalanceError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * ZeroInitialDeposit: 'ZeroInitialDeposit'
 *
 * @category Errors
 * @category generated
 */
export declare class ZeroInitialDepositError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * InvalidLpTokenDecimals: 'InvalidLpTokenDecimals'
 *
 * @category Errors
 * @category generated
 */
export declare class InvalidLpTokenDecimalsError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
export declare function errorFromCode(code: number): MaybeErrorWithCode;
/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
export declare function errorFromName(name: string): MaybeErrorWithCode;
export {};
