/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import * as beetSolana from '@metaplex-foundation/beet-solana'
import { StableSwap, stableSwapBeet } from '../types/StableSwap'
import { Fees, feesBeet } from '../types/Fees'

/**
 * Arguments used to create {@link BinaryPool}
 * @category Accounts
 * @category generated
 */
export type BinaryPoolArgs = {
  index: beet.bignum
  admin: web3.PublicKey
  stablecoinA: web3.PublicKey
  stablecoinB: web3.PublicKey
  amp: beet.bignum
  isFrozen: boolean
  lpToken: web3.PublicKey
  swap: StableSwap
  fees: Fees
}

export const binaryPoolDiscriminator = [2, 107, 125, 178, 245, 162, 209, 59]
/**
 * Holds the data for the {@link BinaryPool} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class BinaryPool implements BinaryPoolArgs {
  private constructor(
    readonly index: beet.bignum,
    readonly admin: web3.PublicKey,
    readonly stablecoinA: web3.PublicKey,
    readonly stablecoinB: web3.PublicKey,
    readonly amp: beet.bignum,
    readonly isFrozen: boolean,
    readonly lpToken: web3.PublicKey,
    readonly swap: StableSwap,
    readonly fees: Fees
  ) {}

  /**
   * Creates a {@link BinaryPool} instance from the provided args.
   */
  static fromArgs(args: BinaryPoolArgs) {
    return new BinaryPool(
      args.index,
      args.admin,
      args.stablecoinA,
      args.stablecoinB,
      args.amp,
      args.isFrozen,
      args.lpToken,
      args.swap,
      args.fees
    )
  }

  /**
   * Deserializes the {@link BinaryPool} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0
  ): [BinaryPool, number] {
    return BinaryPool.deserialize(accountInfo.data, offset)
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link BinaryPool} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig
  ): Promise<BinaryPool> {
    const accountInfo = await connection.getAccountInfo(
      address,
      commitmentOrConfig
    )
    if (accountInfo == null) {
      throw new Error(`Unable to find BinaryPool account at ${address}`)
    }
    return BinaryPool.fromAccountInfo(accountInfo, 0)[0]
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey(
      'AVzr6agjgPNhh4i4bTRLt9rLv48Nj4v5qKxMvgYty21n'
    )
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, binaryPoolBeet)
  }

  /**
   * Deserializes the {@link BinaryPool} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [BinaryPool, number] {
    return binaryPoolBeet.deserialize(buf, offset)
  }

  /**
   * Serializes the {@link BinaryPool} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return binaryPoolBeet.serialize({
      accountDiscriminator: binaryPoolDiscriminator,
      ...this,
    })
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link BinaryPool}
   */
  static get byteSize() {
    return binaryPoolBeet.byteSize
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link BinaryPool} data from rent
   *
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    connection: web3.Connection,
    commitment?: web3.Commitment
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      BinaryPool.byteSize,
      commitment
    )
  }

  /**
   * Determines if the provided {@link Buffer} has the correct byte size to
   * hold {@link BinaryPool} data.
   */
  static hasCorrectByteSize(buf: Buffer, offset = 0) {
    return buf.byteLength - offset === BinaryPool.byteSize
  }

  /**
   * Returns a readable version of {@link BinaryPool} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      index: (() => {
        const x = <{ toNumber: () => number }>this.index
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      admin: this.admin.toBase58(),
      stablecoinA: this.stablecoinA.toBase58(),
      stablecoinB: this.stablecoinB.toBase58(),
      amp: (() => {
        const x = <{ toNumber: () => number }>this.amp
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      isFrozen: this.isFrozen,
      lpToken: this.lpToken.toBase58(),
      swap: this.swap,
      fees: this.fees,
    }
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const binaryPoolBeet = new beet.BeetStruct<
  BinaryPool,
  BinaryPoolArgs & {
    accountDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['index', beet.u64],
    ['admin', beetSolana.publicKey],
    ['stablecoinA', beetSolana.publicKey],
    ['stablecoinB', beetSolana.publicKey],
    ['amp', beet.u64],
    ['isFrozen', beet.bool],
    ['lpToken', beetSolana.publicKey],
    ['swap', stableSwapBeet],
    ['fees', feesBeet],
  ],
  BinaryPool.fromArgs,
  'BinaryPool'
)
